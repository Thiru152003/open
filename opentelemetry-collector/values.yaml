# Core Configuration
enabled: true
mode: deployment
nameOverride: ""
fullnameOverride: ""
namespaceOverride: "otel-collector"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Presets Configuration
presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: false
    storeCheckpoints: false
    maxRecombineLogSize: 102400
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: false
    extractAllPodAnnotations: false
  kubernetesEvents:
    enabled: false
  clusterMetrics:
    enabled: false

# ConfigMap Configuration
configMap:
  create: true
  existingName: ""
  existingPath: ""

# Collector Configuration
config:
  extensions:
    health_check: {}
    memory_ballast:
      size_mib: 512

  exporters:
    logging:
      loglevel: debug
    otlp:
      endpoint: "otel-endpoint:4317"
      tls:
        insecure: false
    prometheus:
      endpoint: "0.0.0.0:8889"
    jaeger:
      endpoint: "jaeger-collector.observability.svc.cluster.local:14250"
      tls:
        insecure: true
      retry_on_failure:
        enabled: true
        initial_interval: 5s
        max_interval: 30s
        max_elapsed_time: 120s
      sending_queue:
        enabled: true
        num_consumers: 10
        queue_size: 5000

  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: "0.0.0.0:4317"
        http:
          endpoint: "0.0.0.0:4318"
    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
              - targets: ["${env:MY_POD_IP}:8888"]
    jaeger:
      protocols:
        grpc:
          endpoint: "0.0.0.0:14250"
        thrift_http:
          endpoint: "0.0.0.0:14268"
        thrift_compact:
          endpoint: "0.0.0.0:6831"
        thrift_binary:
          endpoint: "0.0.0.0:6832"

  processors:
    batch:
      timeout: 5s
      send_batch_size: 10000
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25
    resourcedetection:
      detectors: [env, system, gce, ecs, ec2, azure, eks, gke]
      timeout: 5s
      override: false

  service:
    extensions: [health_check, memory_ballast]
    pipelines:
      traces:
        receivers: [otlp, jaeger]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [logging, jaeger]
      metrics:
        receivers: [otlp, prometheus]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [logging, prometheus]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, resourcedetection, batch]
        exporters: [logging]

# Image Configuration
image:
  registry: ""
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
  tag: "0.96.0"
  digest: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []

# Command Configuration
command:
  name: ""
  extraArgs: ["--mem-ballast-size-mib=512"]

# Service Account Configuration
serviceAccount:
  create: true
  annotations: {}
  name: "otel-collector"

# RBAC Configuration
clusterRole:
  create: true
  annotations: {}
  name: "otel-collector"
  rules:
    - apiGroups: [""]
      resources: ["pods", "nodes", "nodes/proxy", "services", "endpoints"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]
  clusterRoleBinding:
    annotations: {}
    name: "otel-collector"

# Pod Configuration
podSecurityContext:
  fsGroup: 10001
  runAsUser: 10001
  runAsNonRoot: true
securityContext:
  capabilities:
    drop: ["ALL"]
  readOnlyRootFilesystem: true
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []
priorityClassName: ""

# Additional Containers
extraContainers: []
initContainers: []

# Environment Configuration
extraEnvs:
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.cluster.name=my-cluster,k8s.namespace.name=$(NAMESPACE)"
extraEnvsFrom: []

# Ports Configuration
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    protocol: TCP
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
  jaeger:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    protocol: TCP
  jaeger-thrift-http:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    protocol: TCP
  jaeger-thrift-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    protocol: UDP
  jaeger-thrift-binary:
    enabled: true
    containerPort: 6832
    servicePort: 6832
    protocol: UDP

# Resources Configuration
resources:
  limits:
    cpu: "1000m"
    memory: "2Gi"
  requests:
    cpu: "200m"
    memory: "1Gi"

# Probes Configuration
livenessProbe:
  httpGet:
    port: 13133
    path: /
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    port: 13133
    path: /
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

startupProbe:
  httpGet:
    port: 13133
    path: /
  failureThreshold: 30
  periodSeconds: 10

# Pod Metadata
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"
podLabels: {}
additionalLabels: {}

# Network Configuration
hostNetwork: false
hostAliases: []
dnsPolicy: ClusterFirst
dnsConfig: {}

# Deployment Configuration
replicaCount: 2
revisionHistoryLimit: 10
annotations: {}

# Service Configuration
service:
  enabled: true
  type: ClusterIP
  annotations: {}
  externalTrafficPolicy: ""
  internalTrafficPolicy: Cluster

# Monitoring Configuration
podMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s
      path: /metrics
  extraLabels: {}

serviceMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s
      path: /metrics
  extraLabels: {}
  relabelings: []
  metricRelabelings: []

# Autoscaling Configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 20
          periodSeconds: 60

# Network Policy
networkPolicy:
  enabled: true
  annotations: {}
  allowIngressFrom:
    - namespaceSelector:
        matchLabels:
          name: observability
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: jaeger
  extraIngressRules: []
  egressRules:
    - ports:
        - port: 14250
          protocol: TCP
        - port: 14268
          protocol: TCP
      to:
        - namespaceSelector:
            matchLabels:
              name: observability
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: jaeger

# Advanced Features
useGOMEMLIMIT: true
shareProcessNamespace: false
