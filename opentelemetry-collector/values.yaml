# values.yaml

## Global Configuration
mode: deployment  # Options: deployment, daemonset, statefulset
nameOverride: ""
fullnameOverride: ""
namespaceOverride: "otel-collector"  # Target namespace

## Image Configuration
image:
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
  tag: "0.96.0"  # Latest stable version
  pullPolicy: IfNotPresent
  # digest: ""  # Uncomment for immutable deployments

## Resource Configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi

## Presets Configuration
presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: false
    storeCheckpoints: false
  hostMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: false
    extractAllPodAnnotations: false
  kubeletMetrics:
    enabled: true
  kubernetesEvents:
    enabled: false
  clusterMetrics:
    enabled: false

## Collector Configuration
config:
  exporters:
    logging:
      loglevel: info
    otlp:
      endpoint: "otlp-endpoint.example.com:4317"
      tls:
        insecure: false  # Set to true for testing only

  receivers:
    otlp:
      protocols:
        grpc:
        http:

  processors:
    batch: {}
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25

  service:
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp]
      metrics:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp]

## Service Configuration
service:
  type: ClusterIP
  annotations: {}
  ports:
    otlp:
      enabled: true
      servicePort: 4317
    otlp-http:
      enabled: true
      servicePort: 4318
    metrics:
      enabled: true
      servicePort: 8888

## Kubernetes RBAC
serviceAccount:
  create: true
  annotations: {}

clusterRole:
  create: true
  rules: []

## Monitoring Configuration
podMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s

serviceMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s

## Autoscaling Configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

## Network Policy
networkPolicy:
  enabled: true
  allowIngressFrom:
    - namespaceSelector: {}

## Additional Configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"

extraEnvs:
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP

useGOMEMLIMIT: true
