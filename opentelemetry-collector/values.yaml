# Core Configuration
enabled: true
mode: deployment
nameOverride: ""
fullnameOverride: ""
namespaceOverride: "otel-collector"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Presets Configuration
presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: false
    storeCheckpoints: false
    maxRecombineLogSize: 102400
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: false
    extractAllPodAnnotations: false
  kubernetesEvents:
    enabled: false
  clusterMetrics:
    enabled: false

# ConfigMap Configuration
configMap:
  create: true
  existingName: ""
  existingPath: ""

# Collector Configuration
config:
  extensions:
    health_check: {}

  exporters:
    logging:
      loglevel: info
    otlp:
      endpoint: "otel-endpoint:4317"
      tls:
        insecure: false
    prometheus:
      endpoint: "0.0.0.0:8889"
    jaeger:
      endpoint: "jaeger-collector.observability.svc.cluster.local:14250"
      tls:
        insecure: true

  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}
    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
              - targets: ["${env:MY_POD_IP}:8888"]

  processors:
    batch: {}
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25

  service:
    extensions: [health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp, jaeger]
      metrics:
        receivers: [otlp, prometheus]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp, prometheus]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [logging, otlp]

# Image Configuration
image:
  registry: ""
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
  tag: "0.96.0"
  digest: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []

# Command Configuration
command:
  name: ""
  extraArgs: []

# Service Account Configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC Configuration
clusterRole:
  create: true
  annotations: {}
  name: ""
  rules: []
  clusterRoleBinding:
    annotations: {}
    name: ""

# Pod Configuration
podSecurityContext: {}
securityContext: {}
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []
priorityClassName: ""

# Additional Containers
extraContainers: []
initContainers: []

# Environment Configuration
extraEnvs:
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
extraEnvsFrom: []

# Volumes Configuration
extraVolumes: []
extraVolumeMounts: []
extraManifests: []

# Ports Configuration
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    protocol: TCP
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
  jaeger:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    protocol: TCP

# Resources Configuration
resources:
  limits:
    cpu: "1000m"
    memory: "1Gi"
  requests:
    cpu: "200m"
    memory: "512Mi"

# Lifecycle Hooks
lifecycleHooks: {}

# Probes Configuration
livenessProbe:
  httpGet:
    port: 13133
    path: /
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    port: 13133
    path: /
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

startupProbe: {}

# Pod Metadata
podAnnotations: {}
podLabels: {}
additionalLabels: {}

# Network Configuration
hostNetwork: false
hostAliases: []
dnsPolicy: ""
dnsConfig: {}

# Deployment Configuration
replicaCount: 2
revisionHistoryLimit: 10
annotations: {}

# Service Configuration
service:
  enabled: true
  type: ClusterIP
  annotations: {}
  externalTrafficPolicy: ""
  internalTrafficPolicy: ""

# Ingress Configuration
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  hosts: []
  tls: []
  additionalIngresses: []

# Monitoring Configuration
podMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s
  extraLabels: {}

serviceMonitor:
  enabled: true
  metricsEndpoints:
    - port: metrics
      interval: 15s
  extraLabels: {}
  relabelings: []
  metricRelabelings: []

# Autoscaling Configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  behavior: {}

# Rollout Configuration
rollout:
  strategy: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 0

# Prometheus Rules
prometheusRule:
  enabled: false
  groups: []
  defaultRules:
    enabled: false
  extraLabels: {}

# StatefulSet Configuration
statefulset:
  volumeClaimTemplates: []
  podManagementPolicy: "OrderedReady"

# Network Policy
networkPolicy:
  enabled: true
  annotations: {}
  allowIngressFrom: []
  extraIngressRules: []
  egressRules: []

# Advanced Features
internalTelemetryViaOTLP:
  endpoint: ""
  headers: []
  traces:
    enabled: false
    endpoint: ""
    headers: []
  metrics:
    enabled: false
    endpoint: ""
    headers: []
  logs:
    enabled: false
    endpoint: ""
    headers: []

useGOMEMLIMIT: true
shareProcessNamespace: false
